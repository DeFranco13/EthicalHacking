import os
import json
from rich import print
from time import sleep
from tqdm import tqdm
import shutil
import threading
import Pentesting.WebScan.Scans.Scan4data as ScanData
import Pentesting.WebScan.Framework.LoadSettings as Settings
import Pentesting.WebScan.Scans.ScanSSL as SSLScan
import Pentesting.WebScan.Scans.Scan4services as Service
import Pentesting.WebScan.Scans.Scan4dns as DNS
import Pentesting.WebScan.Scans.Scan4robot as Robot
import Pentesting.WebScan.Scans.scan4gobuster as Gobuster
import Pentesting.ModuleTools as Module



website = ""

# ==========
#
# Bar methods
#
# ==========

def BarData():
    with tqdm(total=100, desc=f"Scanning {website}") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(1.2)
    print(" ")

def BarCertificate():
    with tqdm(total=100, desc=f"Scanning Certificate") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(0.6)
    print(" ")

def BarService():
    with tqdm(total=100, desc=f"Scanning Services") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(0.3)
    print(" ")

def BarRobot():
    with tqdm(total=100, desc=f"Scanning Robot file") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(0.6)
    print(" ")
 
def BarGobuster():
    with tqdm(total=100, desc=f"Scanning directories") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(24)
    print(" ")

def BarDNS():
    with tqdm(total=100, desc=f"Scanning DNS") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(0.6)
    print(" ")

# ==========
#
# Call to scanning methods 
#
# ==========

def DataScan():
    ScanData.Start(website)
    data = ScanData.getData()
    header = ScanData.getHeader()
    with open(scandata_json, "w") as jdata:
        json.dump(data , jdata, indent=2)
    with open(header_json, "r") as file:
         json.dump(header)

    
def CertifificateScan():
    SSLScan.job(website)

def ServiceScan():
    serviceData = Service.Start(website)
    with open(servicedata_json, "w") as jdata:
        json.dump(serviceData , jdata, indent=2)

def RobotScan():
    Robot.StartScan(website)

def GobusterScan():
    Gobuster.StartScan(website)

def DNSScan():
    url = website
    DNS.find_subdomains(url)


# ==========
#
# Callable method for parent to start scanning
#
# ==========

def StartScans():
    if Settings.previousDataState == True:
        if os.path.exists("Pentesting/WebScan/Input/outputXML.xml"):
            os.system("rm Pentesting/WebScan/Input/outputXML.xml")
        os.system("rm Output/*")
        
    if Settings.scanState == True:
        os.system(f"touch Output/{website}_FoundData.txt")
        global scandata_json
        global header_json
        scandata_json = f"Output/{website}_FoundData.txt"
        header_json = f"Output/{website}_Header.txt"

        thread1 = threading.Thread(target=DataScan)
        thread2 = threading.Thread(target=BarData)
        thread1.start()
        thread2.start()
        thread1.join()
        thread2.join()

    if Settings.certificateState == True:
        thread3 = threading.Thread(target=CertifificateScan)
        thread4 = threading.Thread(target=BarCertificate)
        thread3.start()
        thread4.start()
        thread3.join()
        thread4.join()

    if Settings.serviceState == True:
        os.system(f"touch Output/{website}_ServicesData.json")
        global servicedata_json
        servicedata_json = f"Output/{website}_ServicesData.json"
        thread5 = threading.Thread(target=ServiceScan)
        thread6 = threading.Thread(target=BarService)
        thread5.start()
        thread6.start()
        thread5.join()
        thread6.join()

    if Settings.robotState == True:
        thread7 = threading.Thread(target=RobotScan)
        thread8 = threading.Thread(target=BarRobot)
        thread7.start()
        thread8.start()
        thread7.join()
        thread8.join()

    if Settings.gobusterState == True:
        thread9 = threading.Thread(target=GobusterScan)
        thread10 = threading.Thread(target=BarGobuster)
        thread9.start()
        thread10.start()
        thread9.join()
        thread10.join()

    if Settings.dnsState == True:
        thread11 = threading.Thread(target=DNSScan)
        thread12 = threading.Thread(target=BarDNS)
        thread11.start()
        thread12.start()
        thread11.join()
        thread12.join()
    

        
    Module.line()
    print(f"""


        Scans are done all the data will be found in Output!
          
          This screen will close in {Module.TRED}15 seconds{Module.TWHITE} and the Framework will start again!


          """)
    Module.line()
    sleep(15)
    

if __name__ == "__main__":
    StartScans()
    
