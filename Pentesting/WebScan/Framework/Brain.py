import os
import json
from rich import print
from time import sleep
from tqdm import tqdm
import shutil
import threading
import Pentesting.WebScan.Scans.Scan4data as ScanData
import Pentesting.WebScan.Framework.LoadSettings as Settings
import Pentesting.WebScan.Scans.ScanSSL as SSLScan
import Pentesting.WebScan.Scans.Scan4services as Service
import Pentesting.WebScan.Scans.Scan4pages as Pages
import Pentesting.WebScan.Framework.Brain as Brain


website = ""

def line():
    # Get the terminal width
    terminal_width, _ = shutil.get_terminal_size()

    # Print a line of "=" characters
    print("=" * terminal_width)

# ==========
#
# Bar methods
#
# ==========

def BarData():
    with tqdm(total=100, desc=f"Scanning {website}") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(1.2)
    print(" ")
def BarCertificate():
    with tqdm(total=100, desc=f"Scanning Certificate") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(0.6)
    print(" ")
def BarService():
    with tqdm(total=100, desc=f"Scanning Services") as pbar:
            for i in range(100):
                pbar.update(1)
                sleep(0.3)
    print(" ")
 
# ==========
#
# Call to scanning methods 
#
# ==========

def DataScan():
    ScanData.Start(website)
    data = ScanData.getData()
    with open(scandata_json, "w") as jdata:
        json.dump(data , jdata, indent=2)

def CertifificateScan():
    SSLScan.job(website)

def ServiceScan():
    serviceData = Service.Start(website)
    with open(servicedata_json, "w") as jdata:
        json.dump(serviceData , jdata, indent=2)


# ==========
#
# Callable method for parent to start scanning
#
# ==========

def StartScans():
    if Settings.previousDataState == True:
        if os.path.exists("Pentesting/WebScan/Input/outputXML.xml"):
            os.system("rm Pentesting/WebScan/Input/outputXML.xml")
        os.system("rm Pentesting/WebScan/Output/*")
        
    if Settings.scanState == True:
        os.system(f"touch Pentesting/WebScan/Output/{website}_FoundData.txt")
        global scandata_json
        scandata_json = f"Pentesting/WebScan/Output/{website}_FoundData.txt"

        thread1 = threading.Thread(target=DataScan)
        thread2 = threading.Thread(target=BarData)
        thread1.start()
        thread2.start()
        thread1.join()
        thread2.join()

    if Settings.certificateState == True:
        thread3 = threading.Thread(target=CertifificateScan)
        thread4 = threading.Thread(target=BarCertificate)
        thread3.start()
        thread4.start()
        thread3.join()
        thread4.join()

    if Settings.serviceState == True:
        os.system(f"touch Pentesting/WebScan/Output/{website}_ServicesData.json")
        global servicedata_json
        servicedata_json = f"Pentesting/WebScan/Output/{website}_ServicesData.json"
        thread5 = threading.Thread(target=ServiceScan)
        thread6 = threading.Thread(target=BarService)
        thread5.start()
        thread6.start()
        thread5.join()
        thread6.join()

    

        
    Brain.line()
    print("""


        Scans are done all the data will be found under Network/Output!
          
          This screen will close in 15 seconds and the Framework will start again!


          """)
    Brain.line()
    sleep(15)
    

if __name__ == "__main__":
    StartScans()
    
