import csv
import xml.etree.ElementTree as ET
import argparse
import ssl





#############################
#                           #
#         XML to CSV        #
#                           #
#############################

def xml_to_csv(input_xml, output_csv, output_pem_csv):
    tree = ET.parse(input_xml)
    root = tree.getroot()








#############################
#                           #
#        XML to PEM         #
#                           #
#############################

    with open(output_pem_csv, 'w', newline='') as csvpemfile:
        csvwriter = csv.writer(csvpemfile)
        csvwriter.writerow(['PEM'])
        for ssltest in root.findall('.//ssltest'):
            host = ssltest.get('host')
            cert = ssl.get_server_certificate((host, 443))
            csvwriter.writerow([cert])









#############################
#                           #
#   Filter data from XML    #
#                           #
#############################

    with open(output_csv, 'w', newline='') as csvfile:
        csvwriter = csv.writer(csvfile)

        csvwriter.writerow(['Host', 'Cipher', 'CipherStrength', 'KeyAlgorithm', 'KeyBits', 'SelfSigned','Serial', 'NotValidBefore', 'NotValidAfter', 'SubjectDN', 'IssuerDN'])

        for ssltest in root.findall('.//ssltest'):
            host = ssltest.get('host')

            for certificate in ssltest.findall('.//certificate'):
                signature_algorithm = certificate.find('signature-algorithm').text
                cipher = certificate.find('subject').text
                cipher_strength = certificate.find('pk').get('bits')
                key_algorithm = certificate.find('pk').get('type')
                key_bits = certificate.find('pk').get('bits')
                
                if certificate.get('type') == "short":
                    self_signed = certificate.find('self-signed').text
                else:
                    self_signed = "Not available"

                if certificate.get('type') == "full":
                    serial = certificate.find("serial").text
                else:
                    serial = "Not available"

                not_valid_before = certificate.find('not-valid-before').text
                not_valid_after = certificate.find('not-valid-after').text
                subject_dn = certificate.find('subject').text
                issuer_dn = certificate.find('issuer').text
            
                csvwriter.writerow([host, cipher, cipher_strength, key_algorithm, key_bits, self_signed, serial, not_valid_before, not_valid_after, subject_dn, issuer_dn])

               

    
#############################
#                           #
#   Arguments for script    #
#                           #
#############################
                
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert XML data to CSV")
    parser.add_argument("--input", help="Input XML file", required=True)
    parser.add_argument("--output", help="Output CSV file", required=True)
    parser.add_argument("--pem", help="Output CSV file for PEM", required=True)

    args = parser.parse_args()
    xml_to_csv(args.input, args.output, args.pem)

